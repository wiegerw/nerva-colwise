import feature : feature ;
import os ;

using python : ;

# Configure doctest
local DOCTEST_INCLUDE_DIR = [ os.environ DOCTEST_INCLUDE_DIR ] ;

# Configure MKL
local ONEAPI_ROOT = [ os.environ ONEAPI_ROOT ] ;
local ONEAPI_INCLUDE_DIR = $(ONEAPI_ROOT)/latest/include ;
local MKL_ROOT = $(ONEAPI_ROOT)/mkl/latest ;
local MKL_INCLUDE_DIR = $(MKL_ROOT)/include ;
local MKL_LIB_DIR = $(MKL_ROOT)/lib ;

# Configure Eigen
local EIGEN_INCLUDE_DIR = [ os.environ EIGEN_INCLUDE_DIR ] ;
EIGEN_INCLUDE_DIR ?= /usr/include/eigen3 ;

# Configure FMT
local FMT_INCLUDE_DIR = [ os.environ FMT_INCLUDE_DIR ] ;

# Configure Lyra
local LYRA_INCLUDE_DIR = [ os.environ LYRA_INCLUDE_DIR ] ;

# Configure pybind11
local PYBIND11_INCLUDE_DIR = [ os.environ PYBIND11_INCLUDE_DIR ] ;

ECHO "DOCTEST_INCLUDE_DIR = $(DOCTEST_INCLUDE_DIR)" ;
ECHO "EIGEN_INCLUDE_DIR = $(EIGEN_INCLUDE_DIR)" ;
ECHO "FMT_INCLUDE_DIR = $(FMT_INCLUDE_DIR)" ;
ECHO "LYRA_INCLUDE_DIR = $(LYRA_INCLUDE_DIR)" ;
ECHO "PYBIND11_INCLUDE_DIR = $(PYBIND11_INCLUDE_DIR)" ;
ECHO "ONEAPI_ROOT = $(ONEAPI_ROOT)" ;
ECHO "MKL_ROOT = $(MKL_ROOT)" ;

# Define a feature for the number type
feature.feature scalar : float double : composite optional propagated ;
feature.compose <scalar>double : <define>NERVA_USE_DOUBLE ;

project nerva
   : requirements
       <include>include
       <include>$(DOCTEST_INCLUDE_DIR)
       <include>$(EIGEN_INCLUDE_DIR)
       <include>$(FMT_INCLUDE_DIR)
       <include>$(LYRA_INCLUDE_DIR)
       <include>$(PYBIND11_INCLUDE_DIR)
       <include>$(ONEAPI_INCLUDE_DIR)
       <include>$(ONEAPI_INCLUDE_DIR)/sycl
       <include>/usr/include/python3.12  # TODO: find a better way for this
       <cxxflags>-std=c++17

       <define>EIGEN_USE_MKL_ALL
       <define>FMT_HEADER_ONLY

       # MKL
       <include>$(MKL_INCLUDE_DIR)
       <cxxflags>-DMKL_ILP64

       # gcc
       <toolset>gcc:<cxxflags>-march=native
       <toolset>gcc:<cxxflags>-m64
       <toolset>gcc:<cxxflags>-fopenmp
       <toolset>gcc:<cxxflags>-Wno-unused-value
       <toolset>gcc:<cxxflags>-Wno-enum-compare

       <toolset>gcc:<linkflags>-L$(MKL_LIB_DIR)
       <toolset>gcc:<linkflags>"-Wl,--start-group -lmkl_intel_ilp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group"
       <toolset>gcc:<linkflags>-liomp5
       <toolset>gcc:<linkflags>-lpthread
       <toolset>gcc:<linkflags>-lm
       <toolset>gcc:<linkflags>-ldl
       <toolset>gcc:<linkflags>-Wl,-rpath,$(MKL_ROOT)/lib
       <toolset>gcc:<linkflags>-Wl,-rpath,$(ONEAPI_ROOT)/latest/lib

       # clang
       <toolset>clang:<cxxflags>-m64
       <toolset>clang:<cxxflags>-fopenmp=libomp
       <toolset>clang:<cxxflags>-Wno-unused-value
       <toolset>clang:<cxxflags>-Wno-enum-compare
       <toolset>clang:<cxxflags>-Wno-int-in-bool-context                   # suppress Eigen warnings
       <toolset>clang:<cxxflags>-Wno-deprecated-anon-enum-enum-conversion  # suppress Eigen warnings
       <toolset>clang:<linkflags>-L$(MKL_LIB_DIR)
       <toolset>clang:<linkflags>"-Wl,--start-group -lmkl_intel_ilp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group"
       <toolset>clang:<linkflags>-lpthread
       <toolset>clang:<linkflags>-lm
       <toolset>clang:<linkflags>-ldl
       <toolset>clang:<linkflags>-Wl,-rpath,$(MKL_ROOT)/lib
       <toolset>clang:<linkflags>-Wl,-rpath,$(ONEAPI_ROOT)/latest/lib

       <toolset>clang-18:<linkflags>-liomp5

       #--- intel icpx ---#
       <toolset>clang-icpx:<cxxflags>-fiopenmp
       <toolset>clang-icpx:<cxxflags>-fhonor-nan-compares    # otherwise std::isnan gives erroneous results
       <toolset>clang-icpx:<linkflags>-L$(MKL_LIB_DIR)
       <toolset>clang-icpx:<linkflags>"-Wl,--start-group -lmkl_intel_ilp64 -lmkl_intel_thread -lmkl_core -Wl,--end-group"
       <toolset>clang-icpx:<linkflags>-liomp5
       <toolset>clang-icpx:<linkflags>-Wl,-rpath,$(MKL_ROOT)/lib
       <toolset>clang-icpx:<linkflags>-Wl,-rpath,$(ONEAPI_ROOT)/latest/lib
       <toolset>clang-icpx:<linkflags>-lpthread
       <toolset>clang-icpx:<linkflags>-lm
       <toolset>clang-icpx:<linkflags>-ldl
       <toolset>clang-icpx:<linkflags>-Wl,-rpath,$(MKL_ROOT)/lib
       <toolset>clang-icpx:<linkflags>-Wl,-rpath,$(ONEAPI_ROOT)/latest/lib

       <toolset>clang-icpx:<define>NERVA_SYCL
       <toolset>clang-icpx:<cxxflags>-Wno-deprecated-declarations       # suppress SYCL warnings
       <toolset>clang-icpx:<cxxflags>-Wno-unneeded-internal-declaration # suppress SYCL warnings
       <toolset>clang-icpx:<cxxflags>-fsycl 
       <toolset>clang-icpx:<cxxflags>-fsycl-unnamed-lambda
       <toolset>clang-icpx:<cxxflags>-fsycl-targets=spir64_x86_64
       <toolset>clang-icpx:<linkflags>-fsycl
       <toolset>clang-icpx:<linkflags>-fsycl-targets=spir64_x86_64
       <toolset>clang-icpx:<linkflags>-lsycl

       #<toolset>clang-icpx:<linkflags>-L$(ONEAPI_ROOT)/latest/lib
       #<toolset>clang-icpx:<cxxflags>-Wno-writable-strings   # suppress MKL warnings
       #<toolset>clang-icpx:<cxxflags>-Wno-tautological-constant-compare
       #<toolset>intel:<cxxflags>-fopenmp-targets=<arch>
   ;

lib nervalib
       :
         src/logger.cpp
         src/utilities.cpp
       :
       ;

# generate tests for all .cpp files
rule test_all
{
  local all_rules = ;

  for local fileb in [ glob *.cpp ]
  {
    all_rules += [ run $(fileb) ] ;
  }

  return $(all_rules) ;
}
